<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="make-dev-jar" name="Workbench">

  <property name="root" value=".."/>
  <property name="src" value="../src"/>
  <property name="testsrc" value="../test"/>
  <property name="unittest" value="../test/junit"/>
  <property name="dbtest" value="../test/dbtest"/>
  <property name="junitdir" value="../build/junit"/>
  <property name="junitlibs" value="../libs/junit"/>
  <property name="scriptsrc" value="."/>
  <property name="libdir" value="../libs"/>
  <property name="build" value="../build/classes"/>
  <property name="build.test" value="../build/test"/>
  <property name="distdir" value="../dist"/>
  <property name="jarfile" value="sqlworkbench.jar"/>
  <property name="javadocdir" value="../javadoc"/>
  <property name="srczipname" value="WorkbenchSrc.zip"/>
  <property name="srczip" value="${root}/../${srczipname}"/>
  <property name="target.version" value="11"/>

  <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpath="../../manual/libs/xmltask-v1.16.jar"/>

  <target name="init">
    <tstamp>
      <format pattern="yyyy-MM-dd" property="today"/>
    </tstamp>
    <tstamp>
      <format pattern="yyyy-MM-dd HH:mm" property="build_timestamp"/>
    </tstamp>
    <echo>Java/JVM version: ${java.version}</echo>
  </target>

  <target name="set-build-number" depends="prepare">
    <buildnumber file="build.number"/>
    <echo message="Build number is ${build.number}"/>

    <!-- Reset the sub-build number for dev-builds -->
    <propertyfile file="devbuild.number">
      <entry key="dev-build.number" type="int" operation="=" value="0"/>
    </propertyfile>
    <antcall target="replace-build-number"/>
  </target>

  <target name="replace-build-number" depends="copy-resources">
    <replace dir="${build}/language" token="@BUILD_NUMBER@" value="${build.number}"/>
    <replace dir="${build}/language" token="@BUILD_DATE@" value="${build_timestamp}"/>
  </target>

  <target name="set-dev-build" depends="prepare">
    <propertyfile file="devbuild.number">
      <entry key="dev-build.number" type="int" operation="+" value="1"/>
    </propertyfile>
    <loadproperties srcFile="release.property"/>
    <loadproperties srcFile="devbuild.number"/>

    <property name="build.number" value="${release.build.number}.${dev-build.number}"/>
    <echo message="Build number is ${build.number}"/>
    <antcall target="replace-build-number"/>
  </target>

  <target name="get-dev-build" depends="prepare">
    <loadproperties srcFile="release.property"/>
    <loadproperties srcFile="devbuild.number"/>

    <property name="build.number" value="${release.build.number}.${dev-build.number}"/>
    <echo message="Build number is ${build.number}"/>
  </target>

  <target name="clean">
    <delete dir="${build}" failonerror="false"/>
    <delete dir="${instrumented.dir}" failonerror="false"/>
    <delete dir="${build.test}"/>
    <delete dir="${junitdir}"/>
    <delete dir="${pdfwork}" failonerror="false"/>
    <delete failonerror="false">
      <fileset dir="${distdir}">
        <include name="WorkbenchSrc*.zip"/>
        <include name="Workbench-Build*.zip"/>
      </fileset>
    </delete>
  </target>

  <target name="clean-junit">
    <delete failonerror="false">
      <fileset dir="${junitdir}">
        <include name="**/*.txt"/>
      </fileset>
    </delete>
    <delete dir="${instrumented.dir}" />
  </target>

  <target name="prepare" depends="init">
    <mkdir dir="${build}"/>
    <mkdir dir="${distdir}"/>
  </target>

  <target name="copy-resources" depends="init">
    <copy overwrite="true" todir="${build}">
      <fileset defaultexcludes="true" dir="${src}">
        <include name="**/*.*"/>
        <exclude name="**/*.html"/>
        <exclude name="**/*.java"/>
        <exclude name="**/*.form"/>
        <exclude name="**/*.class"/>
        <exclude name="**/*.flex"/>
      </fileset>
    </copy>
  </target>

  <target name="prepare-test" depends="prepare,copy-resources">
    <mkdir dir="${build.test}"/>
    <mkdir dir="${junitdir}"/>
    <copy overwrite="true"  todir="${build.test}">
      <fileset defaultexcludes="true" dir="${testsrc}/junit">
        <include name="**/*.sql"/>
        <include name="**/*.xml"/>
        <include name="**/*.xslt"/>
        <include name="**/*.xlsx"/>
        <include name="**/*.xls"/>
        <include name="**/*.ods"/>
        <include name="**/*.txt"/>
        <include name="**/*.properties"/>
      </fileset>
    </copy>
  </target>

  <target name="compile" depends="prepare">

    <!-- compile the starter class with target=1.6 so that it can be loaded by
         older JVMs as well and is able to display the error message -->
    <javac debug="on"
           debuglevel="source,lines"
           destdir="${build}"
           srcdir="${src}"
           target="1.6"
           source="1.6"
           encoding="ISO-8859-1"
           includeantruntime="false"
           includes="workbench/WbStarter.java"/>

    <!-- the rest of the application is compiled to the needed class file version -->
    <javac debug="on"
           debuglevel="source,lines"
           destdir="${build}"
           srcdir="${src}"
           includeantruntime="false"
           encoding="ISO-8859-1">
      <compilerarg line="-Xlint:none --add-exports java.desktop/com.sun.java.swing.plaf.windows=ALL-UNNAMED --add-exports java.desktop/com.sun.java.swing.plaf.motif=ALL-UNNAMED"/>
      <exclude name="workbench/WbStarter.java"/>
      <classpath>
          <fileset dir="../libs/odf" includes="*.jar"/>
          <fileset dir="../libs/poi" includes="*.jar"/>
          <fileset dir="../libs/jna" includes="*.jar"/>
          <fileset dir="../libs/log4j" includes="*.jar"/>
          <fileset dir="../libs/dbunit" includes="*.jar"/>
      </classpath>
    </javac>

  </target>

  <target name="-make-jar" depends="prepare,compile">

    <jar compress="true" level="9" jarfile="${distdir}/${jarfile}">
      <manifest>
        <attribute name="Main-Class" value="workbench.WbStarter"/>
        <attribute name="Class-Path" value=". ext/log4j.jar ext/dbunit.jar ext/slf4j-api.jar ext/slf4j-log4j12.jar ext/mail.jar ext/poi.jar ext/poi-ooxml.jar ext/commons-codec.jar ext/commons-collections4.jar ext/commons-compress.jar ext/commons-logging.jar ext/poi-ooxml-schemas.jar ext/xmlbeans.jar ext/odfdom-java.jar ext/resolver.jar ext/serializer.jar ext/simple-odf.jar ext/xercesImpl.jar ext/xml-apis.jar ext/jna.jar ext/jna-platform.jar ext/flatlaf.jar ext/"/>
        <attribute name="Created-By" value="Thomas Kellerer (support@sql-workbench.eu)"/>
        <attribute name="Implementation-Title" value="SQL Workbench/J"/>
        <attribute name="Implementation-URL" value="http://www.sql-workbench.eu"/>
        <attribute name="WbBuild-Number" value="${build.number}"/>
        <attribute name="WbBuild-Date" value="${build_timestamp}"/>
        <attribute name="Add-Opens" value="java.desktop/com.sun.java.swing.plaf.windows java.desktop/com.apple.laf java.base/java.lang java.desktop/com.sun.java.swing.plaf.motif"/>
      </manifest>
      <fileset dir="${build}">
        <exclude name="**/package.html"/>
      </fileset>
    </jar>

  </target>

  <target name="embeddable-jar" depends="clean, set-dev-prop, copy-resources, compile, get-dev-build, replace-build-number, -jar-noclasspath"/>
  <target name="-jar-noclasspath" depends="prepare,compile">
    <jar compress="true" level="6" jarfile="${distdir}/${jarfile}">
      <manifest>
        <attribute name="Main-Class" value="workbench.WbStarter"/>
        <attribute name="Created-By" value="Thomas Kellerer (support@sql-workbench.eu)"/>
        <attribute name="Implementation-Title" value="SQL Workbench/J"/>
        <attribute name="Implementation-URL" value="http://www.sql-workbench.eu"/>
        <attribute name="WbBuild-Number" value="${build.number}"/>
        <attribute name="WbBuild-Date" value="${build_timestamp}"/>
      </manifest>
      <fileset dir="${build}">
        <exclude name="**/package.html"/>
      </fileset>
    </jar>
  </target>

  <!-- alias for make-src-zip -->
  <target name="src" depends="make-src-zip"/>

  <target name="make-src-zip">
    <delete file="${srczip}"/>

    <zip zipfile="${srczip}">

      <zipfileset dir="${src}" prefix="workbench/src">
        <include name="**/*.*"/>
        <exclude name="**/*.class"/>
        <exclude name="**/*.java~"/>
        <exclude name="**/workbench.settings"/>
        <exclude name="**/.git/**"/>
        <exclude name="**/.nb*"/>
        <exclude name="**/tags"/>
        <exclude name="**/Test/*"/>
        <exclude name="**/*.tws"/>
      </zipfileset>

      <zipfileset dir="${scriptsrc}" prefix="workbench/scripts">
        <exclude name="**/.nb*"/>
        <exclude name="**/.new"/>
        <exclude name="**/*test*"/>
        <exclude name="**/*.txt"/>
        <exclude name="history.html"/>
        <exclude name="make_manual.cmd"/>
        <exclude name="make_release.cmd"/>
        <exclude name="docbook-history.xml"/>
      </zipfileset>

      <zipfileset dir="${testsrc}" prefix="workbench/test">
        <exclude name="**/.nb*"/>
      </zipfileset>

      <zipfileset dir="../../manual" prefix="manual">
        <include name="**/*.*"/>
        <exclude name=".gitignore"/>
        <exclude name="./dist/**"/>
        <exclude name="./build/**"/>
      </zipfileset>

      <zipfileset dir="../website" prefix="workbench/website">
        <include name="**/*.*"/>
        <exclude name="*.html"/>
        <exclude name="test*.*"/>
        <exclude name="*.jar"/>
        <exclude name="*.png"/>
      </zipfileset>
      <zipfileset dir="../xslt" prefix="workbench/xslt">
        <include name="**/*.*"/>
      </zipfileset>
      <zipfileset dir="../../launcher" prefix="launcher">
        <include name="**/*.*"/>
      </zipfileset>
    </zip>
  </target>

  <target name="make-release-manual">
    <ant antfile="../../manual/build.xml" inheritall="false" target="publish"/>
  </target>

  <target name="make-dev-manual">
    <ant antfile="../../manual/build.xml" inheritall="false" target="publish-dev"/>
  </target>

  <target name="set-release-info">
    <tstamp>
      <format pattern="yyyy-MM-dd" property="today"/>
    </tstamp>

    <!-- reset the release property file -->
    <delete file="release.property"/>

    <propertyfile file="release.property">
      <entry key="release.build.number" value="${build.number}"/>
      <entry key="release.build.date" value="${today}"/>
    </propertyfile>
  </target>

  <!-- build a full release -->
  <target name="release" depends="clean, compile, set-build-number, set-release-info, set-history-release-number, set-history-build-date, make-release-manual, -make-jar, release-src-zip, release-package, -make-sha1">

    <ant dir="..\website" inheritall="false" target="release"/>

    <mkdir dir="${root}/release/build${build.number}"/>

    <move todir="${root}/release/build${build.number}">
      <fileset dir="${distdir}">
        <include name="WorkbenchSrc-Build${build.number}.zip"/>
        <include name="Workbench-Build${build.number}*.zip"/>
        <include name="Workbench-Build${build.number}*.tgz"/>
        <include name="*.sha1"/>
      </fileset>
    </move>

  </target>

  <target name="set-dev-prop">
    <property name="dev-jar" value="1"/>
  </target>

  <target name="jar-only" depends="set-dev-prop, copy-resources, compile, get-dev-build, replace-build-number, -make-jar"/>

  <target name="make-dev-jar" depends="set-dev-prop, clean, copy-resources, compile, test, get-dev-build, replace-build-number, -make-jar"/>

  <!-- build a development release -->
  <target name="dev-release" depends="clean, compile, set-dev-build, set-history-build-date, make-dev-manual, -make-jar, release-package, release-src-zip, -make-sha1">
    <tstamp>
      <format pattern="yyyy-MM-dd" property="today"/>
    </tstamp>

    <propertyfile file="release.property">
      <entry key="dev.build.date" value="${today}"/>
      <entry key="dev.build.number" value="${build.number}"/>
    </propertyfile>
    <ant dir="../website" inheritall="false" target="dev-release"/>
  </target>

  <target name="set-history-release-number" depends="set-build-number">
    <xmltask outputter="simple:2" omitHeader="no" source="history.xml" dest="history.xml">
      <attr path="/history/release[1]" attr="build" value="${build.number}"/>
    </xmltask>
  </target>

  <target name="set-history-build-date" depends="init" unless="dev-jar">
    <xmltask outputter="simple:2" omitHeader="no" source="history.xml" dest="history.xml">
      <attr path="/history/release[1]" attr="date" value="${today}"/>
    </xmltask>
  </target>

  <target name="website">
    <ant antfile="../website/build.xml" inheritall="false" target="release"/>
  </target>

  <target name="release-package" depends="fixshellscripts">

    <zip zipfile="${distdir}/Workbench-Build${build.number}.zip">
      <zipfileset dir="${distdir}">
        <include name="${jarfile}"/>
        <include name="SQLWorkbench-Manual.pdf"/>
      </zipfileset>
      <zipfileset dir="../../launcher/release">
        <include name="SQLWorkbench.exe"/>
        <include name="SQLWorkbench64.exe"/>
      </zipfileset>
      <zipfileset dir="../../launcher">
        <include name="SQLWorkbench.cfg.sample"/>
      </zipfileset>
      <zipfileset dir="${scriptsrc}" prefix="ext">
        <include name="README_EXT"/>
      </zipfileset>
      <zipfileset dir="../libs/lnf" prefix="ext">
        <include name="*.jar"/>
      </zipfileset>
      <zipfileset dir="${scriptsrc}">
        <include name="log4j-sample.xml"/>
        <include name="sqlwbconsole.cmd"/>
        <include name="sqlworkbench.cmd"/>
        <include name="history.html"/>
        <include name="LICENSE"/>
        <include name="download_jre.cmd"/>
        <include name="download_jre.ps1"/>
        <include name="README Libraries NEW"/>
      </zipfileset>
      <zipfileset dir="${scriptsrc}" filemode="555">
        <include name="sqlworkbench.sh"/>
        <include name="sqlwbconsole.sh"/>
        <include name="download_jre.sh"/>
      </zipfileset>
      <zipfileset dir="${src}/workbench/resource/images">
        <include name="workbench32.png"/>
      </zipfileset>
      <zipfileset dir="../../manual/dist" prefix="manual">
        <include name="**/*.*"/>
        <exclude name="**/*.xml"/>
      </zipfileset>
      <zipfileset dir="../xslt" prefix="xslt">
        <include name="**/*.xslt"/>
      </zipfileset>
    </zip>

    <zip zipfile="${distdir}/Workbench-Build${build.number}-with-optional-libs.zip">
      <zipfileset dir="${distdir}">
        <include name="${jarfile}"/>
        <include name="SQLWorkbench-Manual.pdf"/>
      </zipfileset>
      <zipfileset dir="../libs/poi" prefix="ext">
        <include name="*.jar"/>
      </zipfileset>
      <zipfileset dir="../libs/odf" prefix="ext">
        <include name="*.jar"/>
      </zipfileset>
      <zipfileset dir="../libs/jna" prefix="ext">
        <include name="*.jar"/>
      </zipfileset>
      <zipfileset dir="../libs/lnf" prefix="ext">
        <include name="*.jar"/>
      </zipfileset>
      <zipfileset dir="../../launcher/bin">
        <include name="SQLWorkbench.exe"/>
        <include name="SQLWorkbench64.exe"/>
      </zipfileset>
      <zipfileset dir="../../launcher">
        <include name="SQLWorkbench.cfg.sample"/>
      </zipfileset>
      <zipfileset dir="${scriptsrc}">
        <include name="log4j-sample.xml"/>
        <include name="sqlworkbench.cmd"/>
        <include name="sqlwbconsole.cmd"/>
        <include name="history.html"/>
        <include name="README Libraries NEW"/>
        <include name="LICENSE"/>
        <include name="download_jre.cmd"/>
        <include name="download_jre.ps1"/>
      </zipfileset>
      <zipfileset dir="${scriptsrc}" filemode="555">
        <include name="sqlworkbench.sh"/>
        <include name="sqlwbconsole.sh"/>
        <include name="download_jre.sh"/>
      </zipfileset>
      <zipfileset dir="${src}/workbench/resource/images">
        <include name="workbench32.png"/>
      </zipfileset>
      <zipfileset dir="../../manual/dist" prefix="manual">
        <include name="**/*.*"/>
      </zipfileset>
      <zipfileset dir="../xslt" prefix="xslt">
        <include name="**/*.xslt"/>
      </zipfileset>
    </zip>

    <delete file="docbook-history.xml" failonerror="false"/>

  </target>

  <target name="-make-sha1">
    <checksum algorithm="SHA-1" fileext=".sha1">
      <fileset dir="${distdir}">
        <include name="WorkbenchSrc-Build${build.number}.zip"/>
        <include name="Workbench-Build${build.number}*.zip"/>
        <include name="Workbench-Build${build.number}-with-optional-libs.zip"/>
      </fileset>
    </checksum>
  </target>

  <target name="release-src-zip" depends="init,fixshellscripts">

    <zip zipfile="${distdir}/WorkbenchSrc-Build${build.number}.zip">
      <zipfileset dir="${src}" prefix="src">
        <include name="**/*.*"/>
        <exclude name="**/workbench.settings"/>
        <exclude name="**/.nb*"/>
        <exclude name="**/*.dfPackage"/>
        <exclude name="**/tags"/>
        <exclude name="**/*.tws"/>
      </zipfileset>

      <zipfileset dir="${testsrc}" prefix="test">
        <include name="**/*.*"/>
      </zipfileset>

      <zipfileset dir="${scriptsrc}" prefix="scripts">
        <include name="build.xml"/>
        <include name="log4j-sample.xml"/>
        <include name="devbuild.number"/>
        <include name="build.number"/>
        <include name="release.property"/>
        <include name="history.xml"/>
        <include name="SQLWorkbench.vbs"/>
        <include name="sqlwbconsole.cmd"/>
        <include name="sqlworkbench.sh"/>
        <include name="download_jre.cmd"/>
        <include name="download_jre.ps1"/>
        <include name="download_jre.sh"/>
        <include name="*.xslt"/>
        <include name="LICENSE"/>
        <include name="README_EXT"/>
        <exclude name="**/*test*"/>
      </zipfileset>

      <zipfileset dir="../../manual" prefix="doc">
        <include name="css/*.*"/>
        <include name="xml/*.*"/>
        <include name="xsl/*.*"/>
        <include name="*.*"/>
        <exclude name="**/.nb*"/>
        <exclude name="**/tags"/>
        <exclude name="**/*.tws"/>
      </zipfileset>

      <zipfileset dir="../xslt" prefix="xslt">
        <include name="*.*"/>
      </zipfileset>

      <zipfileset dir="../../launcher" prefix="launcher">
        <include name="**/*"/>
      </zipfileset>
    </zip>
  </target>

  <target name="generate-lexer">

    <copy quiet="true" overwrite="true"
					file="../src/workbench/sql/lexer/BaseLexer.flex"
          tofile="../src/workbench/sql/lexer/StandardLexer.flex"/>

    <copy quiet="true" overwrite="true"
					file="../src/workbench/sql/lexer/BaseLexer.flex"
          tofile="../src/workbench/sql/lexer/NonStandardLexer.flex"/>

    <copy quiet="true" overwrite="true"
					file="../src/workbench/sql/lexer/BaseLexer.flex"
          tofile="../src/workbench/sql/lexer/MySQLLexer.flex"/>

    <copy quiet="true" overwrite="true"
					file="../src/workbench/sql/lexer/BaseLexer.flex"
          tofile="../src/workbench/sql/lexer/SqlServerLexer.flex"/>

    <copy quiet="true" overwrite="true"
					file="../src/workbench/sql/lexer/BaseLexer.flex"
          tofile="../src/workbench/sql/lexer/PostgresLexer.flex"/>

    <copy quiet="true" overwrite="true"
					file="../src/workbench/sql/lexer/BaseLexer.flex"
          tofile="../src/workbench/sql/lexer/FirebirdLexer.flex"/>

    <replace file="../src/workbench/sql/lexer/StandardLexer.flex">
      <replacefilter token="XXXX_DBMS_XXXX|"/>
    </replace>

    <replace file="../src/workbench/sql/lexer/FirebirdLexer.flex">
      <replacefilter>
        <replacetoken>StandardLexer</replacetoken>
        <replacevalue>FirebirdLexer</replacevalue>
      </replacefilter>
      <replacefilter token="XXXX_DBMS_XXXX|"
                     value='"DELIMITER"|(SET{wsp}TERM)|'/>
      <replacefilter token="(FOREIGN{wsp}DATA{wsp}WRAPPER)|"/>
      <replacefilter token='"VARCHAR2"|'/>
      <replacefilter token="(SNAPSHOT{wsp}LOG)|"/>
      <replacefilter token="(FLASHBACK{wsp}ARCHIVE)|(EVENT{wsp}TRIGGER)"/>
      <replacefilter token="(DATABASE{wsp}LINK)|"/>
      <replacefilter token="(DISTINCT{wsp}ON)|"/>
    </replace>

    <replace file="../src/workbench/sql/lexer/PostgresLexer.flex">
      <replacefilter>
        <replacetoken>StandardLexer</replacetoken>
        <replacevalue>PostgresLexer</replacevalue>
      </replacefilter>
      <replacefilter token="XXXX_DBMS_XXXX|"
                     value='"LIMIT|OFFSET|CLUSTER"|"DISCARD"|"DEALLOCATE"|"DO"|"(IMPORT{wsp}FOREIGN{wsp}SCHEMA)"|"VACUUM"|(FOREIGN{wsp}DATA{wsp}WRAPPER)|(SKIP{wsp}LOCKED)|(NO{wsp}KEY{wsp}UPDATE)|(KEY{wsp}SHARE)|(MATCH{wsp}FULL)|(MATCH{wsp}PARTIAL)|(MATCH{wsp}SIMPLE)|(DEFAULT{wsp}PRIVILEGES)|'/>
      <replacefilter token="(MATERIALIZED{wsp}VIEW{wsp}LOG)|" value="(USER{wsp}MAPPING)"/>
      <replacefilter token="(FLASHBACK{wsp}ARCHIVE)|(EVENT{wsp}TRIGGER)"/>
      <replacefilter token="(PACKAGE{wsp}BODY)|" value="(OPERATOR{wsp}CLASS)|(OPERATOR{wsp}FAMILY)|(ACCESS{wsp}METHOD)|"/>
      <replacefilter token="(TYPE{wsp}BODY)|" value="(FOREIGN{wsp}TABLE)|(TIME{wsp}ZONE)|"/>
      <replacefilter token="(SNAPSHOT{wsp}LOG)|" value="(ACCESS{wsp}METHOD)|"/>
      <replacefilter token="(CONNECT{wsp}BY)|" value='"TRANSFORM"|'/>
      <replacefilter token='"VARCHAR2"|' value='"STATISTICS"'/>
      <replacefilter token="(CREATE{wsp}OR{wsp}ALTER)|"/>
      <replacefilter token="(DATABASE{wsp}LINK)|"/>
      <replacefilter token='"SYSDATE"|'/>
      <replacefilter token='"SYSTIMESTAMP"|' value='"LOCALTIMESTAMP"|'/>
      <replacefilter token='"SESSION_USER"|'/>
      <replacefilter>
        <replacetoken><![CDATA[operator=([\+\-\*\/\<\>\=\~\!\%\^\&\?]|"||"|"!="|"<>"|"<="|">="|"=>"|"(+)")]]></replacetoken>
        <replacevalue><![CDATA[operator=([\+\-\*\/\<\>\=\~\!\%\^\&\?]|"~>~"|"~>=~"|"~<~"|"~<=~"|"!~~*"|"||"|"|/"|"||/"|"!!"|"<<"|">>"|"##"|"~"|"~*"|"!~"|"!~*"|"@?"|"^@"|"@-@"|"@@"|"@@@"|"?&"|"#-"|"#>"|"#>>"|"->"|"->>"|"<->"|"&<"|"&>"|"<<|"|"|>>"|"&<|"|"|&>"|"<^"|">^"|"?#"|"?-"|"?|"|"?-|"|"?|"|"~="|"!="|"<>"|"<="|">="|"=>"|"@>"|"<@")|" @?"|"<<="|">>="]]></replacevalue>
      </replacefilter>
      <replacefilter>
        <replacetoken><![CDATA[identifier=([^ \"\r\n\t\f\+\-\*\/\<\>\=\~\!\%\^\&\'\~\?\(\)\[\]\,\;\:\.0-9][^ \r\n\t\f\+\-\*\/\<\>\=\~\!\%\^\&\'\"\~\?\(\)\]\[\,\;\:\*]*)|(\"[^\r\n\t\f\"]*\")]]></replacetoken>
        <replacevalue><![CDATA[identifier=([^ \"\r\n\t\f\+\-\*\/\<\>\=\~\!\%\^\&\'\~\?\(\)\[\]\,\;\:\.0-9][^ #\r\n\t\f\+\-\*\/\<\>\=\~\!\%\^\&\'\"\~\?\(\)\]\[\,\;\:\*]*)|(\"([^\r\n\t\f\"]*(\"\")*[^\r\n\t\f\"]*)+\")]]></replacevalue>
      </replacefilter>
      <replacefilter>
        <replacetoken><![CDATA[string=([\'](([^\']|\'\')*)[\']|[Nn][\'](([^\']|\'\')*)[\'])]]></replacetoken>
        <replacevalue><![CDATA[string=([\'](([^\']|\'\')*)[\']|[Ee][\'](([^\']|\'\')*)[\'])]]></replacevalue>
      </replacefilter>
    </replace>

    <copy quiet="true" overwrite="true"
					file="../src/workbench/sql/lexer/PostgresLexer.flex"
          tofile="../src/workbench/sql/lexer/PgEscapingLexer.flex"/>

    <replace file="../src/workbench/sql/lexer/PgEscapingLexer.flex">
      <!-- this generates a Postgres based lexer that can handle the backslash for escaping single quotes inside a string literal -->
      <replacefilter>
        <replacetoken>PostgresLexer</replacetoken>
        <replacevalue>PgEscapingLexer</replacevalue>
      </replacefilter>
      <replacefilter>
        <replacetoken>string=([\'](([^\']|\'\')*)[\']|[Ee][\'](([^\']|\'\')*)[\'])</replacetoken>
        <replacevalue>string=([\'](([^\']|\'\'|\\\')*)[\']|[Ee][\'](([^\']|\'\')*)[\'])</replacevalue>
      </replacefilter>
    </replace>

    <replace file="../src/workbench/sql/lexer/SqlServerLexer.flex">
      <replacefilter>
        <replacetoken>StandardLexer</replacetoken>
        <replacevalue>SqlServerLexer</replacevalue>
      </replacefilter>
      <replacefilter>
        <replacetoken>"UPDATE"|</replacetoken>
        <replacevalue>"UPDATE"|"(UPDATE{wsp}STATISTICS)"|</replacevalue>
      </replacefilter>
      <replacefilter token="XXXX_DBMS_XXXX|" value="(BEGIN{wsp}TRANSACTION)|(BEGIN{wsp}TRAN)"/>
      <replacefilter token="(MATERIALIZED{wsp}VIEW)|(PARTITION{wsp}FUNCTION)"/>
      <replacefilter token="(MATERIALIZED{wsp}VIEW{wsp}LOG)|(PARTITION{wsp}SCHEME)"/>
      <replacefilter token="(FLASHBACK{wsp}ARCHIVE)|"/>
      <replacefilter token="(PACKAGE{wsp}BODY)|"/>
      <replacefilter token="(TYPE{wsp}BODY)|"/>
      <replacefilter token="(SIMILAR{wsp}TO)|"/>
      <replacefilter token="(SNAPSHOT{wsp}LOG)|"/>
      <replacefilter token="(DISTINCT{wsp}ON)|"/>
      <replacefilter token="(CONNECT{wsp}BY)|"/>
      <replacefilter token="(START{wsp}WITH)|"/>
      <replacefilter token='"SIMILAR"|'/>
      <replacefilter token='"CYCLE"|'/>
      <replacefilter token='"OVERLAPS"|'/>
      <replacefilter token='"VARCHAR2"|'/>
      <replacefilter token='"DEPTH"|'/>
      <replacefilter token='"CYCLE"|'/>
      <replacefilter token='"DEPTH"|'/>
      <replacefilter token='"DEFERRABLE"|'/>
      <replacefilter token='"DEFERRED"|'/>
      <replacefilter token='"WHENEVER"|'/>
      <replacefilter token='"SYSTIMESTAMP"|'/>
      <replacefilter token="(FOREIGN{wsp}DATA{wsp}WRAPPER)|"/>
      <replacefilter token="(CREATE{wsp}OR{wsp}REPLACE)|"/>
      <replacefilter token="(CREATE{wsp}OR{wsp}ALTER)|"/>
      <replacefilter token="(DATABASE{wsp}LINK)|"/>
      <replacefilter>
        <replacetoken><![CDATA[identifier=([^ \"\r\n\t\f\+\-\*\/\<\>\=\~\!\%\^\&\'\~\?\(\)\[\]\,\;\:\.0-9][^ \r\n\t\f\+\-\*\/\<\>\=\~\!\%\^\&\'\"\~\?\(\)\]\[\,\;\:\*]*)|(\"[^\r\n\t\f\"]*\")]]></replacetoken>
        <replacevalue><![CDATA[identifier=([^ \"\r\n\t\f\+\-\*\/\<\>\=\~\!\%\^\&\'\~\?\(\)\[\]\,\;\:\.0-9][^ \r\n\t\f\+\-\*\/\<\>\=\~\!\%\^\&\'\"\~\?\(\)\]\[\,\;\:\*]*)|(\"[^\r\n\t\f\"]*\")|(\[[^\r\n\t\f\[]*\]) ]]></replacevalue>
      </replacefilter>
      <replacefilter>
        <replacetoken><![CDATA[operator=([\+\-\*\/\<\>\=\~\!\%\^\&\?]|"||"|"!="|"<>"|"<="|">="|"=>"|"(+)")]]></replacetoken>
        <replacevalue><![CDATA[operator=([\+\-\*\/\<\>\=\~\!\%\^\&]|"||"|"!="|"<>"|"*="|"=*"|"<="|">="|"=>")]]></replacevalue>
      </replacefilter>
      <replacefilter>
        <replacetoken><![CDATA[bitstring=("B"[\']([01]+)[\'])]]></replacetoken>
        <replacevalue><![CDATA[bitstring=("B"[\']([01]+)[\'])|"0x"[0-9A-Fa-f]+]]></replacevalue>
      </replacefilter>
    </replace>

    <replace file="../src/workbench/sql/lexer/NonStandardLexer.flex">
      <!-- this generates a Lexer that can handle the backslash for escaping single quotes inside a string literal -->
      <replacefilter>
        <replacetoken>StandardLexer</replacetoken>
        <replacevalue>NonStandardLexer</replacevalue>
      </replacefilter>
      <replacefilter token="XXXX_DBMS_XXXX|"/>
      <replacefilter>
        <replacetoken>string=([\'](([^\']|\'\')*)[\']|[Nn][\'](([^\']|\'\')*)[\'])</replacetoken>
        <replacevalue>string=([\'](([^\']|\'\'|\\\')*)[\'])</replacevalue>
      </replacefilter>
      <replacefilter>
        <replacetoken><![CDATA[operator=([\+\-\*\/\<\>\=\~\!\%\^\&\?]|"||"|"!="|"<>"|"<="|">="|"=>"|"(+)")]]></replacetoken>
        <replacevalue><![CDATA[operator=([\+\-\*\/\<\>\=\~\!\%\^\&\?]|"||"|"|/"|"||/"|"!!"|"<<"|">>"|"##"|"~"|"~*"|"!~"|"!~*"|"@-@"|"@@"|"@@@"|"?&"|"#-"|"#>"|"#>>"|"->"|"->>"|"<->"|"&<"|"&>"|"<<|"|"|>>"|"&<|"|"|&>"|"<^"|">^"|"?#"|"?-"|"?|"|"?-|"|"?|"|"~="|"!="|"<>"|"<="|">="|"=>"|"@>"|"<@")|"<<="|">>="]]></replacevalue>
      </replacefilter>
    </replace>

    <replace file="../src/workbench/sql/lexer/MySQLLexer.flex">
      <replacefilter>
        <replacetoken>StandardLexer</replacetoken>
        <replacevalue>MySQLLexer</replacevalue>
      </replacefilter>
      <replacefilter token="XXXX_DBMS_XXXX|"/>
      <replacefilter token="(MATERIALIZED{wsp}VIEW)|"/>
      <replacefilter token="(MATERIALIZED{wsp}VIEW{wsp}LOG)|"/>
      <replacefilter token="(SNAPSHOT{wsp}LOG)|"/>
      <replacefilter token="(FLASHBACK{wsp}ARCHIVE)|"/>
      <replacefilter token="(START{wsp}WITH)|"/>
      <replacefilter token="(PACKAGE{wsp}BODY)|"/>
      <replacefilter token="(TYPE{wsp}BODY)|"/>
      <replacefilter token="(DISTINCT{wsp}ON)|"/>
      <replacefilter token="(CONNECT{wsp}BY)|"/>
      <replacefilter token="(START{wsp}TRANSACTION)|"/>
      <replacefilter token="(SIMILAR{wsp}TO)|"/>
      <replacefilter token="(PARTITION{wsp}BY)|"/>
      <replacefilter token='"OVERLAPS"|'/>
      <replacefilter token='"OVER"|'/>
      <replacefilter token='"LATERAL"|'/>
      <replacefilter token='"VARCHAR2"|'/>
      <replacefilter token='"SIMILAR"|'/>
      <replacefilter token='"CYCLE"|'/>
      <replacefilter token='"DEPTH"|'/>
      <replacefilter token='"DEFERRABLE"|'/>
      <replacefilter token='"DEFERRED"|'/>
      <replacefilter token='(DATABASE{wsp}LINK)|'/>
      <replacefilter token="(START{wsp}WITH)|"/>
      <replacefilter token="(FOREIGN{wsp}DATA{wsp}WRAPPER)|"/>
      <replacefilter token="(CREATE{wsp}OR{wsp}REPLACE)|"/>
      <replacefilter token="(CREATE{wsp}OR{wsp}ALTER)|"/>
      <replacefilter token="(FULL{wsp}JOIN)|"/>
      <replacefilter token="(FULL{wsp}OUTER{wsp}JOIN)|"/>
      <replacefilter token="(OUTER{wsp}APPLY)|"/>
      <replacefilter token="(CROSS{wsp}APPLY)|"/>
      <replacefilter>
        <replacetoken>linecomment=("--"[^\r\n]*)</replacetoken>
        <replacevalue>linecomment=("--"[ \t]+[^\r\n]*)|("#"[^\r\n]*)</replacevalue>
      </replacefilter>
      <replacefilter>
        <replacetoken><![CDATA[identifier=([^ \"\r\n\t\f\+\-\*\/\<\>\=\~\!\%\^\&\'\~\?\(\)\[\]\,\;\:\.0-9][^ \r\n\t\f\+\-\*\/\<\>\=\~\!\%\^\&\'\"\~\?\(\)\]\[\,\;\:\*]*)|(\"[^\r\n\t\f\"]*\")]]></replacetoken>
        <replacevalue><![CDATA[identifier=([^ \"\r\n\t\f\+\-\*\/\<\>\=\~\!\%\^\&\'\~\?\(\)\[\]\,\;\:\.0-9][^ #\r\n\t\f\+\-\*\/\<\>\=\~\!\%\^\&\'\"\~\?\(\)\]\[\,\;\:\*]*)|(\"[^\r\n\t\f\"]*\")|(`[^\r\n\t\f`]+`)]]></replacevalue>
      </replacefilter>
      <replacefilter>
        <replacetoken><![CDATA[operator=([\+\-\*\/\<\>\=\~\!\%\^\&\?]|"||"|"!="|"<>"|"<="|">="|"=>"|"(+)")]]></replacetoken>
        <replacevalue><![CDATA[operator=([\+\-\*\/\<\>\=\~\!\%\^\&]|"||"|"!="|"<>"|"<="|">="|"=>"|"<=>"|"->"|"->>"|":="|"&&"|"<<"|">>")]]></replacevalue>
      </replacefilter>
    </replace>

    <java classname="JFlex.Main" classpath="../libs/jflex/JFlex.jar" fork="true">
      <jvmarg value="-Xmx256m"/>
      <arg value="-q"/>
      <arg value="-nobak"/>
      <arg value="../src/workbench/sql/lexer/StandardLexer.flex"/>
    </java>

    <java classname="JFlex.Main" classpath="../libs/jflex/JFlex.jar" fork="true">
      <jvmarg value="-Xmx256m"/>
      <arg value="-q"/>
      <arg value="-nobak"/>
      <arg value="../src/workbench/sql/lexer/PostgresLexer.flex"/>
    </java>

    <java classname="JFlex.Main" classpath="../libs/jflex/JFlex.jar" fork="true">
      <jvmarg value="-Xmx256m"/>
      <arg value="-q"/>
      <arg value="-nobak"/>
      <arg value="../src/workbench/sql/lexer/FirebirdLexer.flex"/>
    </java>

    <java classname="JFlex.Main" classpath="../libs/jflex/JFlex.jar" fork="true">
      <jvmarg value="-Xmx256m"/>
      <arg value="-q"/>
      <arg value="-nobak"/>
      <arg value="../src/workbench/sql/lexer/NonStandardLexer.flex"/>
    </java>

    <java classname="JFlex.Main" classpath="../libs/jflex/JFlex.jar" fork="true">
      <jvmarg value="-Xmx256m"/>
      <arg value="-q"/>
      <arg value="-nobak"/>
      <arg value="../src/workbench/sql/lexer/MySQLLexer.flex"/>
    </java>

    <java classname="JFlex.Main" classpath="../libs/jflex/JFlex.jar" fork="true">
      <jvmarg value="-Xmx256m"/>
      <arg value="-q"/>
      <arg value="-nobak"/>
      <arg value="../src/workbench/sql/lexer/SqlServerLexer.flex"/>
    </java>

    <java classname="JFlex.Main" classpath="../libs/jflex/JFlex.jar" fork="true">
      <jvmarg value="-Xmx256m"/>
      <arg value="-q"/>
      <arg value="-nobak"/>
      <arg value="../src/workbench/sql/lexer/PgEscapingLexer.flex"/>
    </java>

  </target>

  <path id="junit.path">
    <fileset dir="${junitlibs}">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="../libs/poi">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="../libs/log4j">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="../libs/odf">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="../libs/dbunit">
      <include name="*.jar"/>
    </fileset>
  </path>

  <target name="compile-tests" depends="prepare-test, compile">
    <javac debug="on"
           includeantruntime="false"
           destdir="${build.test}"
           optimize="off"
           srcdir="${unittest}"
           target="${target.version}"
           source="${target.version}"
           encoding="ISO-8859-1">
      <classpath>
        <pathelement location="${build}"/>
        <path refid="junit.path"/>
      </classpath>
    </javac>
  </target>

  <target name="compile-db-tests" depends="prepare-test, compile-tests">
    <javac debug="on"
           includeantruntime="false"
           destdir="${build.test}"
           optimize="off"
           srcdir="${dbtest}"
           target="${target.version}"
           source="${target.version}"
           encoding="ISO-8859-1">
      <classpath>
        <pathelement location="${build}"/>
        <path refid="junit.path"/>
      </classpath>
    </javac>
  </target>

  <target name="test" depends="compile-tests, clean-junit">

    <junit fork="true"
           forkmode="perBatch"
           maxmemory="512m"
           showoutput="false"
           haltonerror="true"
           haltonfailure="true"
           printsummary="true"
           includeantruntime="true">

      <classpath>
        <pathelement location="${build}"/>
        <pathelement location="${build.test}"/>
        <path refid="junit.path"/>
      </classpath>

      <batchtest todir="${junitdir}">
        <formatter type="plain"/>
        <fileset dir="${unittest}">
          <exclude name="**/XsltTransformerTest.java"/>
          <exclude name="**/ClassFinderTest.java"/>
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>

      <!--
        for some reasons running the XsltTransformerTest on a 64bit JVM
        bombs out with an OutOfMemory error in the PermGen space
        Moving this - and the ClassFinderTest - to a separate VM solves the problem
      -->
      <batchtest todir="${junitdir}">
        <formatter type="plain"/>
        <fileset dir="${unittest}">
          <include name="**/XsltTransformerTest.java"/>
        </fileset>
      </batchtest>

      <batchtest todir="../junit">
        <formatter type="plain"/>
        <fileset dir="${unittest}">
          <include name="**/ClassFinderTest.java.java"/>
        </fileset>
      </batchtest>

    </junit>
  </target>

  <target name="echo-dbtest-type" if="test.db">
    <echo message="Testing ${test.db}"/>
  </target>

  <target name="echo-dbtest" unless="test.db">
    <echo message="Testing all DBMS"/>
  </target>

  <target name="db-test" depends="compile-db-tests, clean-junit, echo-dbtest-type, echo-dbtest">

    <junit fork="true" forkmode="perBatch" showoutput="false" haltonerror="true" haltonfailure="true" printsummary="true" includeantruntime="true">
      <classpath>
        <pathelement location="${build}"/>
        <pathelement location="${build.test}"/>
        <path refid="junit.path"/>
      </classpath>

      <sysproperty key="wbjunit.db2.testdb" value="${wbjunit.db2.testdb}"/>
      <sysproperty key="wbjunit.db2.username" value="${wbjunit.db2.username}"/>
      <sysproperty key="wbjunit.db2.password" value="${wbjunit.db2.password}"/>
      <sysproperty key="wbjunit.db2.schema" value="${wbjunit.db2.schema}"/>

      <batchtest todir="${junitdir}" if="test.db">
        <formatter type="plain"/>
        <fileset dir="${dbtest}/">
          <include name="workbench/db/${test.db}/*Test.java"/>
        </fileset>
      </batchtest>

      <batchtest todir="${junitdir}" unless="test.db">
        <formatter type="plain"/>
        <fileset dir="${dbtest}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>

    </junit>
  </target>

  <target name="test-mysql">
    <property name="test.db" value="mysql"/>
    <antcall target="db-test"/>
  </target>

  <target name="test-db2">
    <property name="test.db" value="ibm"/>
    <property file="db2.test.properties"/>
    <antcall target="db-test"/>
  </target>

  <target name="test-fb">
    <property name="test.db" value="firebird"/>
    <antcall target="db-test"/>
  </target>

  <target name="test-mssql">
    <property name="test.db" value="mssql"/>
    <antcall target="db-test"/>
  </target>

  <target name="test-pg">
    <property name="test.db" value="postgres"/>
    <antcall target="db-test"/>
  </target>

  <target name="test-ora">
    <property name="test.db" value="oracle"/>
    <antcall target="db-test"/>
  </target>

  <target name="javadoc">
    <javadoc destdir="${javadocdir}"
             noqualifier="java.*:javax.*"
             notree="true"
             sourcepath="${src}"
             link="http://docs.oracle.com/javase/8/docs/api/"
             packagenames="workbench.*"/>
  </target>

  <target name="pdf-javadoc">
    <javadoc doclet="com.tarsec.javadoc.pdfdoclet.PDFDoclet"
             docletpath="../libs/doclet/pdfdoclet-1.0.3-all.jar"
             sourcepath="${src}"
             additionalparam="-pdf ${javadocdir}/workbench-api.pdf -config pdf_javadoc.properties"
             packagenames="workbench.*"
    />
  </target>

  <target name="fixshellscripts">

    <fixcrlf srcdir="${scriptsrc}"
       eol="lf"
       eof="remove"
       includes="**/*.sh"/>

    <fixcrlf srcdir="${scriptsrc}"
       eol="crlf"
       eof="remove"
       includes="**/*.cmd"/>

  </target>

</project>
