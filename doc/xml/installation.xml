<section id="install">
  <title>Installing and starting &wb-productname;</title>

  <section id="install-prereq">
    <title>Pre-requisites</title>

    <para>
      &wb-productname; requires a Java 8 (or higher) runtime environment. You can either use a JRE ("Runtime") or a JDK ("Development Kit").
    </para>
    <para>
      Build 126 is the last version to support Java 8, following versions will require Java 11 or higher.
    </para>

    <para>
      For Windows<superscript>&reg;</superscript> and Linux a batch file is provided to automatically download a Java runtime environment
      <itemizedlist>
        <listitem>
          <simpara>For Windows<superscript>&reg;</superscript>: <literal>download_jre.cmd</literal></simpara>
        </listitem>
        <listitem>
          <simpara>For Linux/Unix and MacOS: <literal>download_jre.sh</literal></simpara>
        </listitem>
      </itemizedlist>
      It will download the most recent JRE from <ulink url="https://adoptopenjdk.net">AdoptOpenJDK</ulink>, unpack
      the archive and store it in a sub-directory named <literal>jre</literal> which will automatically be used
      by the native Windows<superscript>&reg;</superscript> launcher and the Linux shell scripts to start &wb-productname;
    </para>

    <para>
      You can manually download Windows<superscript>&reg;</superscript>, Linux or MacOS binaries from on of these sites:
      <itemizedlist>
        <listitem>
          <simpara><ulink url="https://adoptopenjdk.net">AdoptOpenJDK</ulink></simpara>
        </listitem>
        <listitem>
          <simpara><ulink url="http://jdk.java.net/">OpenJDK</ulink></simpara>
        </listitem>
        <listitem>
          <simpara><ulink url="https://www.azul.com/downloads/zulu/">Azul Systems</ulink></simpara>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      Starting with build 126 the <link linkend="">Windows launcher</link> can also download a Java runtime, if none was
      found.
    </para>
  </section>

  <section id="first-time-install">
    <title>First time installation</title>

    <para>
      Once you have downloaded the application's distribution package, unzip the archive into a directory
      of your choice. Apart from that, no special installation procedure is needed.
    </para>

    <para>
      You will need to configure the necessary JDBC driver(s) for your database before you
      can connect to a database. Please refer to the chapter <link linkend="jdbc-setup">JDBC Drivers</link>
      for details on how to make the JDBC driver available to &wb-productname;
    </para>

    <para>
      When starting &wb-productname; for the first time, it will create a directory
      called <literal>.sqlworkbench</literal> in the current user's home folder to
      store all its configuration information.
    </para>

    <para>
      The "user's home directory" is <literal>$HOME</literal> on a Linux or Unix based system,
      and <literal>%HOMEPATH%</literal> on a Windows<superscript>&reg;</superscript> system. (Technically speaking
      it is using the contents of Java system property <literal>user.home</literal> to
      find the user's home directory).
    </para>

  </section>

  <section id="upgrade-install">
    <title>Upgrade installation</title>
    <para>
      When upgrading to a newer version of &wb-productname; simply overwrite the old
      <literal>sqlworkbench.jar</literal>, the <literal>exe</literal> files and shell scripts that
      start the application. If you are using the bundle that includes the libraries for
      reading and writing OpenOffice and Microsoft Office files, replace all existing <literal>jar</literal> files
      in the <literal>ext</literal> subdirectory with those from the distribution archive as well.
    </para>
  </section>

  <section id="starting">
    <title>Starting the program from the commandline</title>

    <para>
      To start the program a shell/batch script is provided.
      When using Linux or MacOS &wb-productname; can be started using <literal>sqlworkbench.sh</literal>.
    </para>

    <para>
      When using Windows<superscript>&reg;</superscript>, you can either use the batch file <literal>sqlworkbench.cmd></literal>
      or <literal>SQLWorkbench.exe</literal> to start &wb-productname;.
    </para>
    <para>
      Details on using the Windows<superscript>&reg;</superscript> launcher can be found
      <link linkend="launcher-using">here</link>.
    </para>
  </section>

  <section id="shell-using">
    <title>Starting the program using the shell script</title>
    <para>
      To run &wb-productname; under an Unix-type operating system, the supplied shell script
      <literal>sqlworkbench.sh</literal> can be used.
    </para>

    <section id="jdk-shell">
      <title>Specifying the Java runtime for the shell script</title>

      <para>
        The shell scripts (and the batch files) first check if a Java runtime is available in the sub-directory <literal>jre</literal>.
        If that is available it will be used. The shell script <literal>download_jre.sh</literal> will automatically extract
        the Java runtime into that directory.
      </para>
      <para>
        If no "local" Java runtime is found, the environment variable <literal>WORKBENCH_JDK</literal>
        is checked. If that variable is defined and points to a Java runtime installation, the shell script will
        use <literal>$WORKBENCH_JDK/bin/java</literal> to run the application.
      </para>
      <para>
        If <literal>WORKBENCH_JDK</literal> is not defined, the shell script will check
        for the environment variable <literal>JAVA_HOME</literal>. If that is defined, the script
        will use <literal>$JAVA_HOME/bin/java</literal> to run the application.
      </para>
      <para>
        If neither <literal>WORKBENCH_JDK</literal> nor <literal>JAVA_HOME</literal> is defined,
        the shell script will simply use <literal>java</literal> to start the application,
        assuming that a valid Java runtime is available on the path.
      </para>
      <para>
        All parameters that are passed to the shell scripts are passed to the application, not to the
        Java runtime. If you want to change the memory or other system settings for the JVM, you need to
        edit the shell script.
      </para>
    </section>

  </section>

  <section id="launcher-using">
    <title>Starting the program using the Windows<superscript>&reg;</superscript> launcher</title>
    <indexterm><primary>Windows</primary><secondary>using the launcher</secondary></indexterm>
    <indexterm><primary>Windows</primary><secondary>Java not found</secondary></indexterm>
    <indexterm><primary>Starting</primary><secondary>Java runtime not found on Windows</secondary></indexterm>
    <indexterm><primary>Java runtime</primary><secondary>Java not found on Windows</secondary></indexterm>

    <para>
      To start &wb-productname; on the Windows<superscript>&reg;</superscript> platform, the supplied <literal>SQLWorkbench.exe</literal>
      can be used to start the program. The file <literal>sqlworkbench.jar</literal> has to be located in the
      same directory as the exe files, otherwise it does not work.
    </para>

    <para>
      Starting with build 126, the launcher has been changed, and it can use 32bit or 64bit Java runtimes alike.
      There is no need for a separate 64bit launcher any more. The <literal>SQLWorkbench64.exe</literal> is only provided for backward compatibility.
    </para>

    <para>
      &wb-productname; does not need a "fully installed" runtime environment, you can also copy
      the <literal>jre</literal> directory from an existing Java installation into the directory where &wb-productname; is installed.
      Creating a symbolic link (using <literal>mklink</literal>) also works. A "local" Java installation in the <literal>jre</literal> subdirectory will have priority over any JRE or JDK registered
      in the Windows<superscript>&reg;</superscript> registry.
    </para>

    <para>
      The launcher searches for the Java runtime in the following order. The first Java installation found
      will be used.
    </para>

    <orderedlist>
      <listitem>
        <simpara>
          it first checks if a command line parameter <literal>-javaHome</literal> was specified. If it was provided
          and points to a Java installation, that will be used.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          then it checks, if the configuration file <literal>sqlworkbench.cfg</literal> contains a <literal>javaHome</literal>
          entry. If it exists and points to a Java installation, that will be used.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          then it checks if a Java runtime is available in the sub-directory <literal>jre</literal>.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          if the environment variable <literal>WORKBENCH_JDK</literal> is defined, the launcher will
          use <literal>%WORKBENCH_JDK%\bin\javaw.exe</literal> to run the application.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          if the environment variable <literal>JAVA_HOME</literal> is defined, the launcher
          will use <literal>%JAVA_HOME%\bin\javaw.exe</literal> to run the application.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          then it checks if the Windows registry contains information about a Java runtime.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          if still no Java was found, all directories defined through the <literal>PATH</literal> variable are searched
          for a Java installation. The first one found will be used.
        </simpara>
      </listitem>
    </orderedlist>

    <para>
      If neither of those steps found a Java runtime, the launcher offers to download a Java runtime or select an
      existing installation. The Java runtime is downloaded from <ulink url="https://adoptopenjdk.net">AdoptOpenJDK</ulink>,
      as the the provided <link linkend="install-prereq">batch file</link> does.
    </para>

    <para>
      All <literal>-X</literal> and <literal>-D</literal> parameters provided to the launcher are passed
      without change to the Java runtime.
    </para>

    <para>
      When using a 32bit Java runtime the default memory available to the application is set to 1GB. When using a 64bit Java runtime
      the default is set to 65% of the available physical memory.
    </para>

    <section id="launcher-parameters">
      <title>Parameters for the Windows<superscript>&reg;</superscript> launcher</title>

      <para id="launcher-ini-file">
        Additional parameters to the Windows<superscript>&reg;</superscript> launcher can be defined in a configuration file that needs to be created
        in the directory where <literal>SQLWorkbench.exe</literal> is located. The name of the file has to be <literal>sqlworkbench.cfg</literal>.
      </para>
      <note><para>
        The format of <literal>sqlworkbench.cfg</literal> is different to the <literal>.ini</literal> file of previous versions. The
        launcher will convert an existing <literal>SQLWorkbench.ini</literal> or <literal>SQLWorkbench64.ini</literal>
        to the new format if started for the first time.
      </para></note>

      <section id="launcher-jvm-location">
        <title>Specifying the Java location</title>
        <para>
          If the launcher cannot find a Java runtime, you can specify the location of the JRE in the configuration file
          in the section <literal>[Workbench]</literal> with the following parameter:
        </para>

        <programlisting>
[Workbench]
javaHome=c:\Program Files\Java
</programlisting>
        <para>
          You need to specify the root directory of the Java runtime (or JDK). This can either be a 32bit or a 64bit runtime,
          but a 64bit runtime is highly recommended.
        </para>
      </section>

      <section id="launcher-memory-parameter">
        <title>Defining the memory for the application</title>
        <para>
          The memory available to the Java runtime is specified through the configuration file by providing the corresponding
          JVM paramter. The following entry would set the maximum memory to 4GB (the <literal>-Xmx</literal> part is passed
          to the Java runtime)
        <programlisting>
[Java]
vmarg.1=-Xmx4g
</programlisting>
        </para>
        <para>
          You can verify the available memory in the about dialog: <menuchoice>
            <guimenu>Help</guimenu>
            <guimenuitem>About</guimenuitem>
          </menuchoice>
        </para>
      </section>
    </section>
  </section>


  <section id="config-dir" xreflabel="Configuration files">
    <title>Configuration directory</title>

    <para>
      The configuration directory is the directory where all config (<literal>workbench.settings</literal>,
      <literal>WbProfiles.xml</literal>, <literal>WbDrivers.xml</literal>) files are stored.
    </para>

    <para>
      If no configuration directory has been specified on the commandline,
      &wb-productname; will identify the configuration directory by looking at the following places
      <orderedlist>
        <listitem><simpara>The current directory</simpara></listitem>
        <listitem><simpara>The directory where <literal>sqlworkbench.jar</literal> is located</simpara></listitem>
        <listitem>
          <simpara>
            In the user's home direcotry
            (e.g. <literal>$HOME/.sqlworkbench</literal> on Unix based systems
            or <literal>%HOMEPATH%\.sqlworkbench</literal> on Windows<superscript>&reg;</superscript> systems)
          </simpara></listitem>
      </orderedlist>
      If the file <literal>workbench.settings</literal> is found in one of those directories, that
      directory is considered the configuration directory.
    </para>
    <para>
      If no configuration directory can be identified, it will be created in the user's home directory (as <literal>.sqlworkbench</literal>).
    </para>
    <para>
      The above mentioned search can be overridden by supplying the configuration directory
      <link linkend="cmdline-parameter-configdir">on the commandline</link> when starting the application.
    </para>

    <para>The following files are stored in the configuration directory:
      <itemizedlist>
        <listitem><simpara>General configuration settings (<filename>workbench.settings</filename>)</simpara></listitem>
        <listitem><simpara>Connection profiles (<filename>WbProfiles.xml</filename>)</simpara></listitem>
        <listitem><simpara>JDBC Driver definitions (<filename>WbDrivers.xml</filename>)</simpara></listitem>
        <listitem><simpara>Customized shortcut definitions (<filename>WbShortcuts.xml</filename>).
          If you did not customize any of the shortcuts, this file does not exist</simpara>
        </listitem>
        <listitem><simpara>Macro definitions (<filename>WbMacros.xml</filename>)</simpara></listitem>
        <listitem><simpara><link linkend="dbexp-options-remember-col-order">Saved column orders</link> from the DbExplorer(<filename>WbColumnOrder.xml</filename>)</simpara></listitem>
        <listitem><simpara>Log file (<filename>workbench.log</filename>)</simpara></listitem>
        <listitem><simpara>Workspace files (<filename>*.wksp</filename>)</simpara></listitem>
        <listitem><simpara>The cache directory for the <link linkend="profile-local-completion-cache">code completion</link></simpara></listitem>
      </itemizedlist>
    </para>

    <para>
      If you want to use a different file for the connection profile than WbProfiles.xml then you can specify the
      location of the profiles with the <literal>-profileStorage</literal> parameter on the command line.
      Thus you can create different shortcuts on your desktop pointing to different sets of profiles.
      The different shortcuts can still use the same main configuration file.
    </para>

    <para>
      <note>
        The location of the settings file (and therefor the configuration directory)
        is shown through <menuchoice><guimenu>Help</guimenu><guimenuitem>About</guimenuitem></menuchoice> and
        on the "General" page of the Options dialog which can be displayed using <menuchoice><guimenu>Tools</guimenu><guimenuitem>Options</guimenuitem></menuchoice>.
      </note>
    </para>

  </section>

  <section id="move-installation">
    <title>Copying an installation</title>

    <para>
      To copy an installation to a different computer, simply copy all the files from the configuration directory
      to the other computer (the log file does not need to be copied).
      When a profile is connected to a workspace, the workspace file should be specified
      without a directory name (or using the <literal>%ConfigDir%</literal> placeholder).
      In that case it is always loaded from the configuration directory.
      If the workspace file is given with an absolute directory, this needs to be adjusted
      after the copying the files.
    </para>

    <para>
      You will need to edit the driver definitions (stored in <filename>WbDrivers.xml</filename>)
      because the <emphasis>full path</emphasis> to the driver's jar file(s) is stored in the file.
    </para>
    <para>
      If you store all JDBC drivers in a common directory (or below a common root directory)
      you can define the <link linkend="settings-libdir">libdir variable</link>. In that case the paths to the
      driver's jar file are stored relative to the <literal>%LibDir%</literal> directory.
      After copying the installation you only need to adjust the <literal>%LibDir%</literal> variable
      on the other computer.
    </para>

  </section>

  <section id="install-increase-memory">
    <title>Increasing the memory available to the application</title>
    <para>
      &wb-productname; is a Java application and thus runs inside a virtual machine (JVM).
      The virtual machine limits the memory of the application independently from the installed
      memory that is available to the operating system.
    </para>

    <para>
      &wb-productname; reads <emphasis role="bold">all</emphasis> the data that is
      returned by a SQL statement into memory. When retrieving large result sets, you might
      get an error message, indicating that not enough memory is available. In this
      case you need to increase the memory that the JVM requests from the operating
      system (or change your statement to return fewer rows).
    </para>

    <para>
      When using the Windows<superscript>&reg;</superscript> launcher (e.g. <literal>SQLWorkbench64.exe</literal>), the available memory is defined
      in the <link linkend="launcher-memory-parameter">INI</link> file.
    </para>

    <para>
      When using the shell or batch scripts, the available memory is defined through the <literal>-Xmx</literal>
      parameter for the <literal>java</literal> command. In the following example, the parameter <literal>-Xmx4g</literal>
      sets the available memory to 4GB
    </para>
    <para><programlisting>java -Xmx4g -jar sqlworkbench.jar</programlisting></para>

    <para>
      If you are using the supplied shell scripts to start &wb-productname;, you can
      edit the scripts and change the value for the -Xmx parameter in there.
    </para>

    <para>
      <note>
        With a 32bit Java runtime, you can not use (or assign) more than approx. 1.5GB for the application. If you need
        to process results that require more memory that that, you will have to use a 64bit Java runtime.
      </note>
    </para>


  </section>

</section>